package net.bagot.pgf.geofence;

import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.util.Log;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.location.Geofence;
import com.google.android.gms.location.LocationServices;

import net.bagot.pgf.util.GeofenceHelper;

import java.util.List;

/* *************************************************************
 * @Author Mathieu BAGOT (mathieu.bagot@univ-ubs.fr)
 * @Date 2016/03/18
 *
 * GeofencesManager
 *
 * This IntentService catches the transition events of the geofences registered with our API key
 * Transfers the transitions events with a "TRANSITION" intent
 *
 * **************************************************************/
public class GeofencesManager implements GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener, ResultCallback<Status> {

    private static final String TAG = "GeofencesManager";

    private Context context;
    private GoogleApiClient googleApiClient;

    private transient PendingIntent geofenceTransitionService;

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Constructor & init

    public GeofencesManager(Context context) {
        this.context = context;

        initGoogleApi();
    }

    // Builds & connects the google api client
    private void initGoogleApi() {
        googleApiClient = new GoogleApiClient.Builder(context)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .addApi(LocationServices.API)
                .build();
        googleApiClient.connect();
    } //-------------------------------------------------------------------------------------------

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Start / stop tracking

    public void register(List<Geofence> geofences) {

        if (!googleApiClient.isConnected()) {
            Log.e(TAG, "Google API is not connected");
            return;
        }

        LocationServices.GeofencingApi.addGeofences(
                googleApiClient,
                GeofenceHelper.getGeofencingRequest(geofences, true),
                getGeofencePendingIntent()
        ).setResultCallback(this); // Result processed in onResult().
    }

    public void unregister() {
        // Remove geofences
        LocationServices.GeofencingApi.removeGeofences(
                googleApiClient,
                getGeofencePendingIntent()
        ).setResultCallback(this);
    }

    public void dispose() {
        // Remove geofences
        LocationServices.GeofencingApi.removeGeofences(
                googleApiClient,
                getGeofencePendingIntent()
        ).setResultCallback(this);

        googleApiClient.disconnect();
        geofenceTransitionService = null;
    }

    // Gets a PendingIntent to handle the events generated by the geofences
    private PendingIntent getGeofencePendingIntent() {
        if (geofenceTransitionService != null) {
            return geofenceTransitionService;
        }
        Intent intent = new Intent(context, GeofenceTransitionService.class);
        geofenceTransitionService = PendingIntent.getService(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
        return geofenceTransitionService;
    } //--------------------------------------------------------------------------------------------

    ////////////////////////////////////////////////////////////////////////////////////////////////
    // Listeners

    @Override
    public void onConnected(Bundle connectionHint) {
        Log.i(TAG, "Connected to GoogleApiClient");
    }

    @Override
    public void onConnectionFailed(ConnectionResult result) {
        Log.i(TAG, "Connection failed: ConnectionResult.getErrorCode() = " + result.getErrorCode());
    }

    @Override
    public void onConnectionSuspended(int cause) {
        Log.i(TAG, "Connection suspended(" + cause + ")");
    }

    public void onResult(Status status) {
        Log.i(TAG, "Status message: " + status.getStatusMessage());
    }
}
